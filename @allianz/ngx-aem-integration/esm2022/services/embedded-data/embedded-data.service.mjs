/* eslint-disable @typescript-eslint/no-explicit-any */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { of } from 'rxjs';
import { concatMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../normalize-url/normalize-url.service";
export const EMBEDDED_DATA_SERVICE_CONFIG_TOKEN = new InjectionToken('EMBEDDED_DATA_SERVICE_CONFIG_TOKEN');
export function getLocaleId(embeddedDataService) {
    return embeddedDataService.LocaleId;
}
export class EmbeddedDataService {
    get ContextConfiguration() {
        if (typeof this._contextConfiguration === 'undefined') {
            this._contextConfiguration = this.parseAttribute(this._serviceConfig.ContextConfigurationAttribute);
        }
        return this._contextConfiguration;
    }
    get CustomConfiguration() {
        if (typeof this._customConfiguration === 'undefined') {
            this._customConfiguration = Object.assign({}, this._serviceConfig.DefaultCustomConfiguration, this.parseAttribute(this._serviceConfig.CustomConfigurationAttribute));
        }
        return this._customConfiguration;
    }
    get I18n() {
        if (typeof this._i18n === 'undefined') {
            this._i18n = this.parseAttribute(this._serviceConfig.I18nAttribute);
        }
        return this._i18n;
    }
    get Caas() {
        if (typeof this._caas === 'undefined') {
            this._caas = this.parseAttribute(this._serviceConfig.CaaSAttribute);
        }
        return this._caas;
    }
    get Language() {
        if (this.ContextConfiguration && this.ContextConfiguration.language) {
            return this.ContextConfiguration.language;
        }
        return this._documentLocale && this._documentLocale.language ? this._documentLocale.language : this._serviceConfig.LanguageDefault;
    }
    get Country() {
        if (this.ContextConfiguration && this.ContextConfiguration.country) {
            return this.ContextConfiguration.country;
        }
        return this._documentLocale && this._documentLocale.country ? this._documentLocale.country : this._serviceConfig.CountryDefault;
    }
    get LocaleId() {
        return this.Language + '-' + this.Country;
    }
    get InstanceId() {
        return this.CustomConfiguration.instanceId;
    }
    get embeddedDataServiceConfig() {
        return this._serviceConfig;
    }
    constructor(http, normalizeUrlService, serviceConfig, document) {
        this.http = http;
        this.normalizeUrlService = normalizeUrlService;
        this.serviceConfig = serviceConfig;
        this.document = document;
        this._serviceConfig = {
            rootElementTagName: 'app',
            production: true,
            ContextConfigurationAttribute: 'contextconfiguration',
            CustomConfigurationAttribute: 'customconfiguration',
            I18nAttribute: 'i18n',
            AssetsBasePath: '/assets',
            CaaSAttribute: 'caascontent',
            LanguageDefault: 'en',
            CountryDefault: 'US',
        };
        this.findRootElement(this.document, this.serviceConfig);
        if (document && document.documentElement && document.documentElement.lang) {
            this._documentLocale = parseLocale(document.documentElement.lang);
        }
        if (serviceConfig) {
            Object.assign(this._serviceConfig, serviceConfig);
        }
    }
    findRootElement(_document, serviceConfig) {
        if (serviceConfig && serviceConfig.rootElementTagName) {
            const nativeElement = _document.getElementsByTagName(serviceConfig.rootElementTagName);
            if (nativeElement && nativeElement.length === 1) {
                this._rootElement = nativeElement[0];
                return;
            }
        }
        throw new Error('EmbeddedDataService: Root element of app could not be found!');
    }
    parseAttribute(name) {
        if (!this._rootElement) {
            throw new Error('Embedded data was not initialized!');
        }
        try {
            const attrCont = this._rootElement.getAttribute(name);
            if (attrCont.length > 0) {
                const content = JSON.parse(attrCont);
                if (!isEmpty(content)) {
                    return content;
                }
            }
        }
        catch (e) {
            if (!this._serviceConfig.production) {
                console.log('Error parsing embedded data point: ' + name);
            }
        }
        return;
    }
    /**
     * CaaS resolution logic:
     *    1. If CaaS attribute was received, use that
     *    2. If instanceId in Custom configuration, try instance config
     *    3. try global config
     * @param lang
     */
    getCaaSConfiguration() {
        // 1.
        if (this.Caas) {
            return of(this.Caas);
        }
        let ret = of(null);
        // 2.
        if (this.CustomConfiguration.instanceId) {
            ret = ret.pipe(concatMap(() => {
                return (this.http
                    .get(this.normalizeUrlService.normalizeUrl(`${this._serviceConfig.AssetsBasePath}/${this.CustomConfiguration.instanceId}/config.json`), { withCredentials: true })
                    .pipe(() => of(null)));
            }));
        }
        // 3.
        ret = ret.pipe(concatMap((prev) => {
            if (prev === null) {
                return this.http.get(this.normalizeUrlService.normalizeUrl(`${this._serviceConfig.AssetsBasePath}/config.json`), {
                    withCredentials: true,
                });
            }
            else {
                return of(prev);
            }
        }));
        return ret;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.1", ngImport: i0, type: EmbeddedDataService, deps: [{ token: i1.HttpClient }, { token: i2.NormalizeUrlService }, { token: EMBEDDED_DATA_SERVICE_CONFIG_TOKEN, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.1", ngImport: i0, type: EmbeddedDataService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.1", ngImport: i0, type: EmbeddedDataService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.NormalizeUrlService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [EMBEDDED_DATA_SERVICE_CONFIG_TOKEN]
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }] });
function isEmpty(obj) {
    for (const prop in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, prop)) {
            return false;
        }
    }
    return true;
}
// http://userguide.icu-project.org/locale
function parseLocale(locale) {
    if (!locale) {
        return void 0;
    }
    // extract keyword
    const stringLocale = String(locale);
    const keywordPos = stringLocale.indexOf('@');
    const keyword = keywordPos !== -1 ? stringLocale.substr(keywordPos + 1) : void 0;
    const localeWithoutKeyword = keywordPos !== -1 ? stringLocale.substr(0, keywordPos) : stringLocale;
    // en-us => en_us
    const parts = String(localeWithoutKeyword).replace(/-/g, '_').split('_');
    if (!parts.length || parts.length > 4) {
        return void 0;
    }
    const language = parts.shift();
    if (!language) {
        return void 0;
    }
    const retVar = {
        keyword,
        language: language.toLowerCase(),
    };
    if (!parts.length) {
        return retVar;
    }
    if (parts.length === 3) {
        const variant = parts.pop();
        if (variant) {
            retVar.variant = variant.toUpperCase();
        }
    }
    let country = parts.pop();
    if (country.length > 3) {
        retVar.keyword = country;
        country = parts.pop();
    }
    if (country) {
        retVar.country = country.toUpperCase();
    }
    if (!parts.length) {
        return retVar;
    }
    const script = parts.pop();
    if (script) {
        // capitalize it.
        retVar.script = script.substr(0, 1).toUpperCase() + script.substr(1).toLowerCase();
    }
    return retVar;
}
//# sourceMappingURL=data:application/json;base64,