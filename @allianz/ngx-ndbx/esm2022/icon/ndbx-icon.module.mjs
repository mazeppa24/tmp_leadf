import { NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DEFAULT_ICONS, NX_ICON_INITIALIZER, NxIconModule } from '@aposin/ng-aquila/icon';
import * as i0 from "@angular/core";
import * as i1 from "@aposin/ng-aquila/icon";
import * as i2 from "@angular/platform-browser";
const SVG_ICONS = {
    // this icon was added directly to the library via https://github.developer.allianz.io/ilt/ngx-ndbx/issues/3690
    // instead of adding it to the official icon font.
    // we leave it here for now and manually add it to the docs that it is not a breaking change
    relation: '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path d="M8,6.1 C8.45882118,6.1 8.83745178,6.44333667 8.89298772,6.88710591 L8.9,7 L8.9,14.1 L15.687,14.1 L13.293,11.707 C12.9320769,11.3460769 12.9043136,10.7798047 13.2097101,10.3872895 L13.293,10.293 C13.684,9.902 14.316,9.902 14.707,10.293 L18.707,14.293 C19.098,14.684 19.098,15.316 18.707,15.707 L14.707,19.707 C14.512,19.902 14.256,20 14,20 C13.744,20 13.488,19.902 13.293,19.707 C12.902,19.316 12.902,18.684 13.293,18.293 L15.685,15.9 L8,15.9 C7.54117882,15.9 7.16254822,15.5566633 7.10701228,15.1128941 L7.1,15 L7.1,7 C7.1,6.50294373 7.50294373,6.1 8,6.1 Z" id="path-1"></path></defs><g id="Expert-new-motor-(Current-UI)" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="NM-Expert-04.1-TP-Damage-Overview-Added" transform="translate(-264.000000, -447.000000)"><g id="Damage-add" transform="translate(256.000000, 288.000000)"><g id="form-/-2.incident-/-Other-parties-involved" transform="translate(0.000000, 52.000000)"><g id="Relation_icon" transform="translate(8.000000, 107.000000)"><rect id="Boundingbox" x="0" y="0" width="24" height="24"></rect><mask id="mask-2" fill="currentColor"><use xlink:href="#path-1"></use></mask><use id="Combined-Shape" fill="currentColor" xlink:href="#path-1"></use></g></g></g></g></g></svg>',
    'exclamation-circle-warning': '<svg height="22" viewBox="0 0 22 22" width="22" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd" transform="translate(-1 -1)"><path d="m23 12c0-6.075-4.924-11-11-11-6.075 0-11 4.925-11 11 0 .38.02.755.057 1.125.376 3.697 2.583 6.854 5.7 8.548.312.169.632.323.962.463.986.417 2.047.695 3.156.807.371.037.746.057 1.125.057.38 0 .755-.02 1.125-.057 1.11-.112 2.17-.39 3.157-.807.33-.14.65-.294.962-.463 3.117-1.694 5.324-4.851 5.7-8.548.037-.37.056-.745.056-1.125z" fill="#efbe25"/><path d="m12.1 15.8c.551 0 1 .45 1 1v.2c0 .55-.449 1-1 1h-.199c-.551 0-1-.45-1-1v-.2c0-.55.449-1 1-1zm.2-9.8c.386 0 .7.315.7.7v6.6c0 .386-.314.7-.7.7h-.599c-.386 0-.701-.314-.701-.7v-6.6c0-.385.315-.7.701-.7z" fill="#414141"/></g></svg>',
};
export class NdbxIconModule {
    constructor(registry, sanitizer) {
        registry.registerFont('ndbx-icons', 'ndbx-icon', 'nx-icon--');
        registry.setDefaultFont('ndbx-icons');
        Object.keys(DEFAULT_ICONS).forEach(iconName => registry.addFontIcon(iconName, '', 'ndbx-icons'));
        Object.entries(SVG_ICONS).forEach(([iconName, literal]) => registry.addSvgIconLiteral(iconName, sanitizer.bypassSecurityTrustHtml(literal)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NdbxIconModule, deps: [{ token: i1.NxIconRegistry }, { token: i2.DomSanitizer }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.6", ngImport: i0, type: NdbxIconModule, imports: [NxIconModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NdbxIconModule, imports: [NxIconModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NdbxIconModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NxIconModule],
                    exports: [],
                    providers: [],
                }]
        }], ctorParameters: () => [{ type: i1.NxIconRegistry }, { type: i2.DomSanitizer }] });
export function provideNdbxIcons() {
    return {
        provide: NX_ICON_INITIALIZER,
        useFactory: (sanitizer) => (registry) => {
            registry.registerFont('ndbx-icons', 'ndbx-icon', 'nx-icon--');
            registry.setDefaultFont('ndbx-icons');
            Object.keys(DEFAULT_ICONS).forEach(iconName => registry.addFontIcon(iconName, '', 'ndbx-icons'));
            Object.entries(SVG_ICONS).forEach(([iconName, literal]) => registry.addSvgIconLiteral(iconName, sanitizer.bypassSecurityTrustHtml(literal)));
        },
        multi: true,
        deps: [DomSanitizer],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmRieC1pY29uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1uZGJ4L3NyYy9pY29uL25kYngtaWNvbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLEVBQWtCLE1BQU0sd0JBQXdCLENBQUM7Ozs7QUFFMUcsTUFBTSxTQUFTLEdBQThCO0lBQ3pDLCtHQUErRztJQUMvRyxrREFBa0Q7SUFDbEQsNEZBQTRGO0lBQzVGLFFBQVEsRUFDSiwrM0NBQSszQztJQUNuNEMsNEJBQTRCLEVBQ3hCLGt1QkFBa3VCO0NBQ3p1QixDQUFDO0FBT0YsTUFBTSxPQUFPLGNBQWM7SUFDdkIsWUFBWSxRQUF3QixFQUFFLFNBQXVCO1FBQ3pELFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RCxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDakcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pKLENBQUM7OEdBTlEsY0FBYzsrR0FBZCxjQUFjLFlBSmIsWUFBWTsrR0FJYixjQUFjLFlBSmIsWUFBWTs7MkZBSWIsY0FBYztrQkFMMUIsUUFBUTttQkFBQztvQkFDTixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLE9BQU8sRUFBRSxFQUFFO29CQUNYLFNBQVMsRUFBRSxFQUFFO2lCQUNoQjs7QUFVRCxNQUFNLFVBQVUsZ0JBQWdCO0lBQzVCLE9BQU87UUFDSCxPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLFVBQVUsRUFBRSxDQUFDLFNBQXVCLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBd0IsRUFBRSxFQUFFO1lBQ2xFLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUM5RCxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDakcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pKLENBQUM7UUFDRCxLQUFLLEVBQUUsSUFBSTtRQUNYLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQztLQUN2QixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IERFRkFVTFRfSUNPTlMsIE5YX0lDT05fSU5JVElBTElaRVIsIE54SWNvbk1vZHVsZSwgTnhJY29uUmVnaXN0cnkgfSBmcm9tICdAYXBvc2luL25nLWFxdWlsYS9pY29uJztcblxuY29uc3QgU1ZHX0lDT05TOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIC8vIHRoaXMgaWNvbiB3YXMgYWRkZWQgZGlyZWN0bHkgdG8gdGhlIGxpYnJhcnkgdmlhIGh0dHBzOi8vZ2l0aHViLmRldmVsb3Blci5hbGxpYW56LmlvL2lsdC9uZ3gtbmRieC9pc3N1ZXMvMzY5MFxuICAgIC8vIGluc3RlYWQgb2YgYWRkaW5nIGl0IHRvIHRoZSBvZmZpY2lhbCBpY29uIGZvbnQuXG4gICAgLy8gd2UgbGVhdmUgaXQgaGVyZSBmb3Igbm93IGFuZCBtYW51YWxseSBhZGQgaXQgdG8gdGhlIGRvY3MgdGhhdCBpdCBpcyBub3QgYSBicmVha2luZyBjaGFuZ2VcbiAgICByZWxhdGlvbjpcbiAgICAgICAgJzxzdmcgd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiPjxkZWZzPjxwYXRoIGQ9XCJNOCw2LjEgQzguNDU4ODIxMTgsNi4xIDguODM3NDUxNzgsNi40NDMzMzY2NyA4Ljg5Mjk4NzcyLDYuODg3MTA1OTEgTDguOSw3IEw4LjksMTQuMSBMMTUuNjg3LDE0LjEgTDEzLjI5MywxMS43MDcgQzEyLjkzMjA3NjksMTEuMzQ2MDc2OSAxMi45MDQzMTM2LDEwLjc3OTgwNDcgMTMuMjA5NzEwMSwxMC4zODcyODk1IEwxMy4yOTMsMTAuMjkzIEMxMy42ODQsOS45MDIgMTQuMzE2LDkuOTAyIDE0LjcwNywxMC4yOTMgTDE4LjcwNywxNC4yOTMgQzE5LjA5OCwxNC42ODQgMTkuMDk4LDE1LjMxNiAxOC43MDcsMTUuNzA3IEwxNC43MDcsMTkuNzA3IEMxNC41MTIsMTkuOTAyIDE0LjI1NiwyMCAxNCwyMCBDMTMuNzQ0LDIwIDEzLjQ4OCwxOS45MDIgMTMuMjkzLDE5LjcwNyBDMTIuOTAyLDE5LjMxNiAxMi45MDIsMTguNjg0IDEzLjI5MywxOC4yOTMgTDE1LjY4NSwxNS45IEw4LDE1LjkgQzcuNTQxMTc4ODIsMTUuOSA3LjE2MjU0ODIyLDE1LjU1NjY2MzMgNy4xMDcwMTIyOCwxNS4xMTI4OTQxIEw3LjEsMTUgTDcuMSw3IEM3LjEsNi41MDI5NDM3MyA3LjUwMjk0MzczLDYuMSA4LDYuMSBaXCIgaWQ9XCJwYXRoLTFcIj48L3BhdGg+PC9kZWZzPjxnIGlkPVwiRXhwZXJ0LW5ldy1tb3Rvci0oQ3VycmVudC1VSSlcIiBzdHJva2U9XCJub25lXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPjxnIGlkPVwiTk0tRXhwZXJ0LTA0LjEtVFAtRGFtYWdlLU92ZXJ2aWV3LUFkZGVkXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC0yNjQuMDAwMDAwLCAtNDQ3LjAwMDAwMClcIj48ZyBpZD1cIkRhbWFnZS1hZGRcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMjU2LjAwMDAwMCwgMjg4LjAwMDAwMClcIj48ZyBpZD1cImZvcm0tLy0yLmluY2lkZW50LS8tT3RoZXItcGFydGllcy1pbnZvbHZlZFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLjAwMDAwMCwgNTIuMDAwMDAwKVwiPjxnIGlkPVwiUmVsYXRpb25faWNvblwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg4LjAwMDAwMCwgMTA3LjAwMDAwMClcIj48cmVjdCBpZD1cIkJvdW5kaW5nYm94XCIgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiPjwvcmVjdD48bWFzayBpZD1cIm1hc2stMlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48dXNlIHhsaW5rOmhyZWY9XCIjcGF0aC0xXCI+PC91c2U+PC9tYXNrPjx1c2UgaWQ9XCJDb21iaW5lZC1TaGFwZVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB4bGluazpocmVmPVwiI3BhdGgtMVwiPjwvdXNlPjwvZz48L2c+PC9nPjwvZz48L2c+PC9zdmc+JyxcbiAgICAnZXhjbGFtYXRpb24tY2lyY2xlLXdhcm5pbmcnOlxuICAgICAgICAnPHN2ZyBoZWlnaHQ9XCIyMlwiIHZpZXdCb3g9XCIwIDAgMjIgMjJcIiB3aWR0aD1cIjIyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxnIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMSAtMSlcIj48cGF0aCBkPVwibTIzIDEyYzAtNi4wNzUtNC45MjQtMTEtMTEtMTEtNi4wNzUgMC0xMSA0LjkyNS0xMSAxMSAwIC4zOC4wMi43NTUuMDU3IDEuMTI1LjM3NiAzLjY5NyAyLjU4MyA2Ljg1NCA1LjcgOC41NDguMzEyLjE2OS42MzIuMzIzLjk2Mi40NjMuOTg2LjQxNyAyLjA0Ny42OTUgMy4xNTYuODA3LjM3MS4wMzcuNzQ2LjA1NyAxLjEyNS4wNTcuMzggMCAuNzU1LS4wMiAxLjEyNS0uMDU3IDEuMTEtLjExMiAyLjE3LS4zOSAzLjE1Ny0uODA3LjMzLS4xNC42NS0uMjk0Ljk2Mi0uNDYzIDMuMTE3LTEuNjk0IDUuMzI0LTQuODUxIDUuNy04LjU0OC4wMzctLjM3LjA1Ni0uNzQ1LjA1Ni0xLjEyNXpcIiBmaWxsPVwiI2VmYmUyNVwiLz48cGF0aCBkPVwibTEyLjEgMTUuOGMuNTUxIDAgMSAuNDUgMSAxdi4yYzAgLjU1LS40NDkgMS0xIDFoLS4xOTljLS41NTEgMC0xLS40NS0xLTF2LS4yYzAtLjU1LjQ0OS0xIDEtMXptLjItOS44Yy4zODYgMCAuNy4zMTUuNy43djYuNmMwIC4zODYtLjMxNC43LS43LjdoLS41OTljLS4zODYgMC0uNzAxLS4zMTQtLjcwMS0uN3YtNi42YzAtLjM4NS4zMTUtLjcuNzAxLS43elwiIGZpbGw9XCIjNDE0MTQxXCIvPjwvZz48L3N2Zz4nLFxufTtcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbTnhJY29uTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbXSxcbiAgICBwcm92aWRlcnM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBOZGJ4SWNvbk1vZHVsZSB7XG4gICAgY29uc3RydWN0b3IocmVnaXN0cnk6IE54SWNvblJlZ2lzdHJ5LCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xuICAgICAgICByZWdpc3RyeS5yZWdpc3RlckZvbnQoJ25kYngtaWNvbnMnLCAnbmRieC1pY29uJywgJ254LWljb24tLScpO1xuICAgICAgICByZWdpc3RyeS5zZXREZWZhdWx0Rm9udCgnbmRieC1pY29ucycpO1xuICAgICAgICBPYmplY3Qua2V5cyhERUZBVUxUX0lDT05TKS5mb3JFYWNoKGljb25OYW1lID0+IHJlZ2lzdHJ5LmFkZEZvbnRJY29uKGljb25OYW1lLCAnJywgJ25kYngtaWNvbnMnKSk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKFNWR19JQ09OUykuZm9yRWFjaCgoW2ljb25OYW1lLCBsaXRlcmFsXSkgPT4gcmVnaXN0cnkuYWRkU3ZnSWNvbkxpdGVyYWwoaWNvbk5hbWUsIHNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChsaXRlcmFsKSkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVOZGJ4SWNvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdmlkZTogTlhfSUNPTl9JTklUSUFMSVpFUixcbiAgICAgICAgdXNlRmFjdG9yeTogKHNhbml0aXplcjogRG9tU2FuaXRpemVyKSA9PiAocmVnaXN0cnk6IE54SWNvblJlZ2lzdHJ5KSA9PiB7XG4gICAgICAgICAgICByZWdpc3RyeS5yZWdpc3RlckZvbnQoJ25kYngtaWNvbnMnLCAnbmRieC1pY29uJywgJ254LWljb24tLScpO1xuICAgICAgICAgICAgcmVnaXN0cnkuc2V0RGVmYXVsdEZvbnQoJ25kYngtaWNvbnMnKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKERFRkFVTFRfSUNPTlMpLmZvckVhY2goaWNvbk5hbWUgPT4gcmVnaXN0cnkuYWRkRm9udEljb24oaWNvbk5hbWUsICcnLCAnbmRieC1pY29ucycpKTtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKFNWR19JQ09OUykuZm9yRWFjaCgoW2ljb25OYW1lLCBsaXRlcmFsXSkgPT4gcmVnaXN0cnkuYWRkU3ZnSWNvbkxpdGVyYWwoaWNvbk5hbWUsIHNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChsaXRlcmFsKSkpO1xuICAgICAgICB9LFxuICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgZGVwczogW0RvbVNhbml0aXplcl0sXG4gICAgfTtcbn1cbiJdfQ==