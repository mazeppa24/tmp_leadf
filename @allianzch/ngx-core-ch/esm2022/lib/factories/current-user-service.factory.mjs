import { CurrentUserService } from '../services/user-service/current-user.service';
/**
 * Factory for the current user service. Returns a concrete implementation of the {@link CurrentUserService} depending on the environment.
 * As this class has dependencies,
 * we have to make sure that these dependencies are met in different factories before providing this service.
 * Because of {@link APP_INITIALIZER} and provisioning of custom interdependent services this topic is quite complex...
 * @param HttpClientService httpClientService
 * @param TranslateService translateService
 * @param Router: router
 * @param MsgService: messageService
 * @returns CurrentUserService
 */
export function currentUserServiceFactory(httpClientService, translateService, router, messageService) {
    return new CurrentUserService(httpClientService, translateService, router, messageService);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC11c2VyLXNlcnZpY2UuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FsbGlhbnpjaC9uZ3gtY29yZS1jaC9zcmMvbGliL2ZhY3Rvcmllcy9jdXJyZW50LXVzZXItc2VydmljZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBTW5GOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLFVBQVUseUJBQXlCLENBQ3ZDLGlCQUFvQyxFQUNwQyxnQkFBa0MsRUFDbEMsTUFBYyxFQUNkLGNBQThCO0lBRTlCLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDN0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEN1cnJlbnRVc2VyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3VzZXItc2VydmljZS9jdXJyZW50LXVzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2h0dHAtc2VydmljZS9odHRwLWNsaWVudC1zZXJ2aWNlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBNZXNzYWdlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL21lc3NhZ2Utc2VydmljZS9tZXNzYWdlLXNlcnZpY2UnO1xuXG4vKipcbiAqIEZhY3RvcnkgZm9yIHRoZSBjdXJyZW50IHVzZXIgc2VydmljZS4gUmV0dXJucyBhIGNvbmNyZXRlIGltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgQ3VycmVudFVzZXJTZXJ2aWNlfSBkZXBlbmRpbmcgb24gdGhlIGVudmlyb25tZW50LlxuICogQXMgdGhpcyBjbGFzcyBoYXMgZGVwZW5kZW5jaWVzLFxuICogd2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB0aGVzZSBkZXBlbmRlbmNpZXMgYXJlIG1ldCBpbiBkaWZmZXJlbnQgZmFjdG9yaWVzIGJlZm9yZSBwcm92aWRpbmcgdGhpcyBzZXJ2aWNlLlxuICogQmVjYXVzZSBvZiB7QGxpbmsgQVBQX0lOSVRJQUxJWkVSfSBhbmQgcHJvdmlzaW9uaW5nIG9mIGN1c3RvbSBpbnRlcmRlcGVuZGVudCBzZXJ2aWNlcyB0aGlzIHRvcGljIGlzIHF1aXRlIGNvbXBsZXguLi5cbiAqIEBwYXJhbSBIdHRwQ2xpZW50U2VydmljZSBodHRwQ2xpZW50U2VydmljZVxuICogQHBhcmFtIFRyYW5zbGF0ZVNlcnZpY2UgdHJhbnNsYXRlU2VydmljZVxuICogQHBhcmFtIFJvdXRlcjogcm91dGVyXG4gKiBAcGFyYW0gTXNnU2VydmljZTogbWVzc2FnZVNlcnZpY2VcbiAqIEByZXR1cm5zIEN1cnJlbnRVc2VyU2VydmljZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3VycmVudFVzZXJTZXJ2aWNlRmFjdG9yeShcbiAgaHR0cENsaWVudFNlcnZpY2U6IEh0dHBDbGllbnRTZXJ2aWNlLFxuICB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICByb3V0ZXI6IFJvdXRlcixcbiAgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlLFxuKTogQ3VycmVudFVzZXJTZXJ2aWNlIHtcbiAgcmV0dXJuIG5ldyBDdXJyZW50VXNlclNlcnZpY2UoaHR0cENsaWVudFNlcnZpY2UsIHRyYW5zbGF0ZVNlcnZpY2UsIHJvdXRlciwgbWVzc2FnZVNlcnZpY2UpO1xufVxuIl19