{"version":3,"file":"allianzch-ngx-core-ch.mjs","sources":["../../../../projects/allianzch/ngx-core-ch/src/lib/app-config/app-config-service-config-token.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/app-config/app-config.service.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/error-page/error-page.component.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/error-page/error-page.component.html","../../../../projects/allianzch/ngx-core-ch/src/lib/ndbx-shared.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/error-page/error-page.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/language-selection/language-selection.component.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/language-selection/language-selection.component.html","../../../../projects/allianzch/ngx-core-ch/src/lib/components/language-selection/language-selection.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/loading-spinner/loading-spinner.component.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/loading-spinner/loading-spinner.component.html","../../../../projects/allianzch/ngx-core-ch/src/lib/components/loading-spinner/loading-spinner.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/user-info/user-info-error-page/user-info-error-page-reason.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/notification.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/notification-type.enum.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/notification-message.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/notification-context-type.enum.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/services/http-service/http-client-service.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/services/message-service/message-service.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/services/user-service/current-user.service.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/user-info/user-info-error-page/user-info-error-page.component.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/user-info/user-info-error-page/user-info-error-page.component.html","../../../../projects/allianzch/ngx-core-ch/src/lib/components/user-info/user-info-error-page/user-info-error-page.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/user-info/user-info.component.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/user-info/user-info.component.html","../../../../projects/allianzch/ngx-core-ch/src/lib/components/user-info/user-info.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/toast-type.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/banner-context-type.enum.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/message.component.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/message.component.html","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/message.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/components.module.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/services/http-service/http-client-impl.service.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/factories/http-service.factory.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/services/message-service/message-impl.service.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/factories/message-service.factory.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/factories/current-user-service.factory.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/components/message/message.pojo.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/util/window-ref.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/util/ngx-core-ch-datepicker.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/language/missing-translation.handler.ts","../../../../projects/allianzch/ngx-core-ch/src/lib/ngx-core-ch.module.ts","../../../../projects/allianzch/ngx-core-ch/src/public_api.ts","../../../../projects/allianzch/ngx-core-ch/src/allianzch-ngx-core-ch.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { AppConfigServiceConfig } from './app-config-service-config';\n\nexport const APP_CONFIG_SERVICE_CONFIG_TOKEN = new InjectionToken<AppConfigServiceConfig>('APP_CONFIG_SERVICE_CONFIG_TOKEN');\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { AppConfigServiceConfig } from './app-config-service-config';\nimport { APP_CONFIG_SERVICE_CONFIG_TOKEN } from './app-config-service-config-token';\n\n@Injectable()\nexport class AppConfigService {\n  private _config: AppConfigServiceConfig = {\n    environment: '',\n    apiServerRoot: '',\n    authenticationEndpointUrl: '',\n    authenticationCallbackUrl: '',\n    baseUrl: '',\n  };\n\n  constructor(@Inject(APP_CONFIG_SERVICE_CONFIG_TOKEN) @Optional() private config: AppConfigServiceConfig) {\n    // apply only if defined\n    if (config) {\n      if (config.environment) {\n        this._config.environment = config.environment;\n      }\n\n      if (config.apiServerRoot) {\n        this._config.apiServerRoot = config.apiServerRoot;\n      }\n\n      if (config.authenticationEndpointUrl) {\n        this._config.authenticationEndpointUrl = config.authenticationEndpointUrl;\n      }\n\n      if (config.authenticationCallbackUrl) {\n        this._config.authenticationCallbackUrl = config.authenticationCallbackUrl;\n      }\n\n      if (config.baseUrl) {\n        this._config.baseUrl = config.baseUrl;\n      }\n    }\n  }\n\n  get environment(): string | undefined {\n    return this._config.environment;\n  }\n\n  get apiServerRoot(): string | undefined {\n    return this._config.apiServerRoot;\n  }\n\n  get authenticationEndpointUrl(): string | undefined {\n    return this._config.authenticationEndpointUrl;\n  }\n\n  get authenticationCallbackUrl(): string | undefined {\n    return this._config.authenticationCallbackUrl;\n  }\n\n  get baseUrl(): string | undefined {\n    return this._config.baseUrl;\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { AppConfigService } from '../../app-config/app-config.service';\n\n/**\n * Component that shows an error page\n */\n@Component({\n  /*eslint-disable */\n  selector: 'ngx-core-ch-error-page',\n  templateUrl: './error-page.component.html',\n  styleUrls: ['./error-page.component.scss'],\n  /*eslint-enable */\n})\nexport class NgxCoreChErrorPageComponent {\n  @Input() errorPageTitle = '';\n  @Input() errorPageText = '';\n  @Input() message = '';\n  @Input() applicationReloadLabel = '';\n\n  constructor(private appConfigService: AppConfigService) {}\n\n  getWindowLocationOrigin(): string {\n    return window.location.origin + this.appConfigService.baseUrl;\n  }\n}\n","<div nxLayout=\"grid maxwidth\" class=\"nx-margin-top-l margin-box\">\n  <div nxRow rowJustify=\"center,center,center,center\">\n    <div nxCol=\"1\">\n      <nx-icon name=\"exclamation-triangle\" size=\"l\" class=\"error\"></nx-icon>\n    </div>\n    <div nxCol=\"11\">\n      <h1 nxHeadline=\"subsection-small\">{{errorPageTitle}}</h1>\n      <p nxCopytext=\"large\">{{errorPageText}}</p>\n      <p nxCopytext=\"normal\">{{message}}</p>\n      <nx-link>\n        <a [href]=\"getWindowLocationOrigin()\">{{applicationReloadLabel}}</a>\n      </nx-link>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\n\n// NDBX\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientJsonpModule, HttpClientModule } from '@angular/common/http';\nimport { NxAccordionModule } from '@aposin/ng-aquila/accordion';\nimport { NxAutocompleteModule } from '@aposin/ng-aquila/autocomplete';\nimport { NxBadgeModule } from '@aposin/ng-aquila/badge';\nimport { NxBreadcrumbModule } from '@aposin/ng-aquila/breadcrumb';\nimport { NxButtonModule } from '@aposin/ng-aquila/button';\nimport { NxCardModule } from '@aposin/ng-aquila/card';\nimport { NxCheckboxModule } from '@aposin/ng-aquila/checkbox';\nimport { NxCircleToggleModule } from '@aposin/ng-aquila/circle-toggle';\nimport { NxCodeInputModule } from '@aposin/ng-aquila/code-input';\nimport { NxComparisonTableModule } from '@aposin/ng-aquila/comparison-table';\nimport { NxCopytextModule } from '@aposin/ng-aquila/copytext';\nimport { NxDatefieldModule } from '@aposin/ng-aquila/datefield';\nimport { NxDropdownModule } from '@aposin/ng-aquila/dropdown';\nimport { NxDynamicTableModule } from '@aposin/ng-aquila/dynamic-table';\nimport { NxFormfieldModule } from '@aposin/ng-aquila/formfield';\nimport { NxGridModule } from '@aposin/ng-aquila/grid';\nimport { NxHeadlineModule } from '@aposin/ng-aquila/headline';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { NxImageModule } from '@aposin/ng-aquila/image';\nimport { NgOptimizedImage } from '@angular/common';\nimport { NxIndicatorModule } from '@aposin/ng-aquila/indicator';\nimport { NxInputModule } from '@aposin/ng-aquila/input';\nimport { NxLabelModule } from '@aposin/ng-aquila/base';\nimport { NxLinkModule } from '@aposin/ng-aquila/link';\nimport { NxListModule } from '@aposin/ng-aquila/list';\nimport { NxMaskModule } from '@aposin/ng-aquila/mask';\nimport { NxMessageModule } from '@aposin/ng-aquila/message';\nimport { NxMomentDateModule } from '@aposin/ng-aquila/moment-date-adapter';\nimport { NxNaturalLanguageFormModule } from '@aposin/ng-aquila/natural-language-form';\nimport { NxNotificationPanelModule } from '@aposin/ng-aquila/notification-panel';\nimport { NxNumberStepperModule } from '@aposin/ng-aquila/number-stepper';\nimport { NxPageSearchModule } from '@aposin/ng-aquila/page-search';\nimport { NxPaginationModule } from '@aposin/ng-aquila/pagination';\nimport { NxPhoneInputModule } from '@aposin/ng-aquila/phone-input';\nimport { NxPopoverModule } from '@aposin/ng-aquila/popover';\nimport { NxProgressbarModule } from '@aposin/ng-aquila/progressbar';\nimport { NxProgressStepperModule } from '@aposin/ng-aquila/progress-stepper';\nimport { NxRadioModule } from '@aposin/ng-aquila/radio-button';\nimport { NxRadioToggleModule } from '@aposin/ng-aquila/radio-toggle';\nimport { NxRatingModule } from '@aposin/ng-aquila/rating';\nimport { NxSliderModule } from '@aposin/ng-aquila/slider';\nimport { NxSpinnerModule } from '@aposin/ng-aquila/spinner';\nimport { NxSwitcherModule } from '@aposin/ng-aquila/switcher';\nimport { NxTableModule } from '@aposin/ng-aquila/table';\nimport { NxTabsModule } from '@aposin/ng-aquila/tabs';\nimport { NxTaglistModule } from '@aposin/ng-aquila/taglist';\nimport { NxTimefieldModule } from '@aposin/ng-aquila/timefield';\nimport { NxVideoModule } from '@aposin/ng-aquila/video';\nimport { RouterModule } from '@angular/router';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { NxLicencePlateModule } from '@aposin/ng-aquila/licence-plate';\nimport { NxModalModule } from '@aposin/ng-aquila/modal';\nimport { NxSignalButtonModule } from '@aposin/ng-aquila/signal-button';\n\n// NDBX - Expert\nimport { NdbxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxActionModule } from '@aposin/ng-aquila/action';\nimport { NxContextMenuModule } from '@aposin/ng-aquila/context-menu';\nimport { NxErrorModule } from '@aposin/ng-aquila/base';\nimport { NxFileUploaderModule } from '@aposin/ng-aquila/file-uploader';\nimport { NxFooterModule } from '@aposin/ng-aquila/footer';\nimport { NxHeaderModule } from '@aposin/ng-aquila/header';\nimport { NxMenuModule } from '@aposin/ng-aquila/menu';\nimport { NxSidebarModule } from '@aposin/ng-aquila/sidebar';\nimport { NxSidepanelModule } from '@aposin/ng-aquila/sidepanel';\nimport { NxToolbarModule } from '@aposin/ng-aquila/toolbar';\nimport { NxTooltipModule } from '@aposin/ng-aquila/tooltip';\nimport { NxTreeModule } from '@aposin/ng-aquila/tree';\nimport { NxAvatarModule } from '@aposin/ng-aquila/avatar';\nimport { NxDataDisplayModule } from '@aposin/ng-aquila/data-display';\nimport { NxOverlayModule } from '@aposin/ng-aquila/overlay';\nimport { NxSmallStageModule } from '@aposin/ng-aquila/small-stage';\nimport { NxSwipebarModule } from '@aposin/ng-aquila/swipebar';\n\nconst EXPORTED_MODULES = [\n  BrowserAnimationsModule,\n  BrowserModule,\n  FormsModule,\n  HttpClientJsonpModule,\n  HttpClientModule,\n  NxAccordionModule,\n  NxActionModule,\n  NxAutocompleteModule,\n  NxAvatarModule,\n  NxBadgeModule,\n  NxBreadcrumbModule,\n  NxButtonModule,\n  NxCardModule,\n  NxCheckboxModule,\n  NxCircleToggleModule,\n  NxCodeInputModule,\n  NxComparisonTableModule,\n  NxContextMenuModule,\n  NxCopytextModule,\n  NxDataDisplayModule,\n  NxDatefieldModule,\n  NxDropdownModule,\n  NxDynamicTableModule,\n  NxErrorModule,\n  NxFileUploaderModule,\n  NxFooterModule,\n  NxFormfieldModule,\n  NxGridModule,\n  NxHeaderModule,\n  NxHeadlineModule,\n  NxIconModule,\n  NxImageModule,\n  NgOptimizedImage,\n  NxIndicatorModule,\n  NxInputModule,\n  NxLabelModule,\n  NxLinkModule,\n  NxListModule,\n  NxMaskModule,\n  NxMenuModule,\n  NxMessageModule,\n  NxMomentDateModule,\n  NxNaturalLanguageFormModule,\n  NxNotificationPanelModule,\n  NxNumberStepperModule,\n  NxOverlayModule,\n  NxPageSearchModule,\n  NxPaginationModule,\n  NxPopoverModule,\n  NxProgressbarModule,\n  NxProgressStepperModule,\n  NxRadioModule,\n  NxRadioToggleModule,\n  NxRatingModule,\n  NxSidebarModule,\n  NxSidepanelModule,\n  NxSliderModule,\n  NxSmallStageModule,\n  NxSpinnerModule,\n  NxSwitcherModule,\n  NxSwipebarModule,\n  NxTableModule,\n  NxTabsModule,\n  NxTaglistModule,\n  NxTimefieldModule,\n  NxToolbarModule,\n  NxTooltipModule,\n  NxTreeModule,\n  NxVideoModule,\n  ReactiveFormsModule,\n  RouterModule,\n  ScrollingModule,\n  TextFieldModule,\n  NdbxIconModule,\n  NxPhoneInputModule,\n  NxLicencePlateModule,\n  NxModalModule,\n  NxSignalButtonModule,\n];\n\n@NgModule({\n  imports: [...EXPORTED_MODULES],\n  exports: [...EXPORTED_MODULES],\n})\nexport class NdbxSharedModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxCoreChErrorPageComponent } from './error-page.component';\n\n// NDBX\nimport { NdbxSharedModule } from '../../ndbx-shared.module';\n\n@NgModule({\n  declarations: [NgxCoreChErrorPageComponent],\n  imports: [CommonModule, NdbxSharedModule],\n  exports: [NgxCoreChErrorPageComponent],\n})\nexport class NgxCoreChErrorPageModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n/**\n * Used to change the language\n */\n@Component({\n  /*eslint-disable */\n  selector: 'ngx-core-ch-language-selection',\n  templateUrl: './language-selection.component.html',\n  styleUrls: ['./language-selection.component.css'],\n  /*eslint-enable */\n})\nexport class NgxCoreChLanguageSelectionComponent implements OnInit {\n  @Input() listLabel!: string;\n  languageList!: Array<string>;\n  showSelection = false;\n\n  /**\n   * Init the component\n   *\n   * @param AppDatastore appDataStore - the central data store\n   * @param NxDateAdapter<moment.Moment> nxDateAdapter - used to change the local\n   * @param string nxDateLocale - used to change the local\n   * @param TranslateService translate - the translation\n   */\n  constructor(private translate: TranslateService) {}\n\n  /**\n   * Init the variables\n   */\n  ngOnInit() {\n    this.listLabel = this.translate.currentLang.toUpperCase();\n    this.languageList = this.translate.getLangs();\n  }\n\n  /**\n   * Display / Hide the selection\n   */\n  displaySelection() {\n    this.showSelection = !this.showSelection;\n  }\n\n  getCurrentLang(language: string): boolean {\n    if (language.toUpperCase() === this.translate.currentLang.toUpperCase()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Used to change the translation language from the frontend\n   * @param String isoCode\n   */\n  changeLangByCode(isoCode: string) {\n    this.showSelection = !this.showSelection;\n    this.translate.use(isoCode);\n  }\n}\n","<div>\n\n  <ng-container>\n    {{listLabel}}\n  </ng-container>\n\n  <nx-context-menu #menu=\"nxContextMenu\" >\n    <button nxContextMenuItem type='button' (click)=\"changeLangByCode(langEntry)\" *ngFor=\"let langEntry of languageList\">\n      {{langEntry.toUpperCase()}}\n      <nx-icon aria-hidden=\"true\" name=\"check\" size=\"auto\" *ngIf=\"getCurrentLang(langEntry)\"></nx-icon>\n    </button>\n  </nx-context-menu>\n\n  <button\n    nxIconButton=\"tertiary small\"\n    [nxContextMenuTriggerFor]=\"menu\"\n    aria-label=\"Open menu\"\n    type=\"button\"\n    class=\"nx-margin-left-2xs\">\n    <nx-icon aria-hidden=\"true\" name=\"chevron-down-small\" size=\"s\"></nx-icon>\n  </button>\n\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NgxCoreChLanguageSelectionComponent } from './language-selection.component';\n\nimport { NxCopytextModule } from '@aposin/ng-aquila/copytext';\nimport { NxButtonModule } from '@aposin/ng-aquila/button';\nimport { NxContextMenuModule } from '@aposin/ng-aquila/context-menu';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\n\n@NgModule({\n  declarations: [NgxCoreChLanguageSelectionComponent],\n  imports: [CommonModule, NxContextMenuModule, NxIconModule, NxButtonModule, NxCopytextModule],\n  exports: [NgxCoreChLanguageSelectionComponent],\n  bootstrap: [],\n  providers: [],\n})\nexport class NgxCoreChLanguageSelectionModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  /*eslint-disable */\n  selector: 'ngx-core-ch-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.scss'],\n  /*eslint-enable */\n})\nexport class NgxCoreChSpinnerComponent {}\n","<div class=\"loading-overlay\">\n  <nx-spinner size=\"medium\"></nx-spinner>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NgxCoreChSpinnerComponent } from './loading-spinner.component';\n\n// NDBX\nimport { NdbxSharedModule } from '../../ndbx-shared.module';\n\n@NgModule({\n  declarations: [NgxCoreChSpinnerComponent],\n  imports: [CommonModule, NdbxSharedModule],\n  exports: [NgxCoreChSpinnerComponent],\n  bootstrap: [],\n  providers: [],\n})\nexport class NgxCoreChSpinnerModule {}\n","/**\n * The reason why the error page has to be shown\n */\nexport enum UserInfoErrorPageReason {\n  GENERAL_EXCEPTION = 'general_exception',\n  USER_NOT_AUTHORIZED = 'user_not_authorized',\n}\n","import { NotificationType } from './notification-type.enum';\nimport { NotificationMessage } from './notification-message';\n\nexport class Notification {\n  notificationType: NotificationType;\n  notificationMessages: NotificationMessage[];\n\n  constructor(notificationType: NotificationType, notificationMessages: NotificationMessage[]) {\n    this.notificationType = notificationType;\n    this.notificationMessages = notificationMessages;\n  }\n}\n","export enum NotificationType {\n  inline,\n  closable,\n  banner,\n  toast,\n}\n","import { NotificationContextType } from './notification-context-type.enum';\n\nexport class NotificationMessage {\n  message: string;\n  notificationContextType: NotificationContextType;\n\n  constructor(message: string, notificationContextType: NotificationContextType) {\n    this.message = message;\n    this.notificationContextType = notificationContextType;\n  }\n}\n","export enum NotificationContextType {\n  regular = 'regular',\n  info = 'info',\n  error = 'error',\n  success = 'success',\n  warning = 'warning',\n}\n","import { Observable } from 'rxjs';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport abstract class HttpClientService {\n  /**\n   * Performs a request with `get` http method.\n   * @param string url - A string containing the URL to which the request is sent.\n   * @param options options - Options to construct a RequestOptions, based on\n   *                                       [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n   */\n  abstract get<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Performs a request with `post` http method.\n   * @param string url - A string containing the URL to which the request is sent.\n   * @param any body - The actual HTTP request data\n   * @param options options - Options to construct a RequestOptions, based on\n   *                                       [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n   */\n  abstract post<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Performs a request with `put` http method.\n   * @param string url - A string containing the URL to which the request is sent.\n   * @param any body - The actual HTTP request data\n   * @param options options - Options to construct a RequestOptions, based on\n   *                                       [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n   */\n  abstract put<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Performs a request with `delete` http method.\n   * @param string url - A string containing the URL to which the request is sent.\n   * @param options options - Options to construct a RequestOptions, based on\n   *                                       [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n   */\n  abstract delete<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n}\n","import { Message } from '../../components/message/message.pojo';\nimport { Subject } from 'rxjs';\nimport { Notification } from '../../components/message/notification';\n\n/**\n * Service whose methods can emit messages (to show on page, in a modal popup or as a toast) and can route to error page.\n * Backend errors/validation can be automatically handled.\n */\nexport abstract class MessageService {\n  onNonModalError: Subject<Message[]>;\n  notification: Subject<Notification>;\n\n  protected constructor() {\n    this.onNonModalError = new Subject<Message[]>();\n    this.notification = new Subject<Notification>();\n  }\n\n  /*****************************************************************************************************************/\n  /* The following methods are used to show messages/errors manually (no http request involved)                    */\n  /*****************************************************************************************************************/\n\n  /**\n   * @deprecated use handleNotification(notification: Notification) method instead.\n   * Emits non-modal messages\n   * @param messages {Message[]} - Object that holds the validation/error messages\n   */\n  abstract handleNonModalError(messages: Message[]): void;\n\n  /**\n   * Emits notification\n   * @param notificationMessages: Notification - Object that holds the notification type and notificationMessages\n   */\n  abstract handleNotification(notification: Notification): void;\n\n  /**\n   * Navigates to error page. A message-service can be passed as routeParams.\n   * @param routeTo - The name of the route. For Example '/ErrorPage' (value of [routerLink])\n   * @param errorMessage - The error message for the error page\n   * @param trackingId - when we have an error on the backend it helps backend error tracking\n   */\n  abstract goToErrorPage(routeTo: string, errorMessage: string, trackingId?: string): void;\n}\n","import { Injectable } from '@angular/core';\nimport { catchError, retry } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { PersonInterface } from './person.interface';\nimport { UserrolesInterface } from './userroles.interface';\nimport { HttpClientService } from '../http-service/http-client-service';\nimport { UserInfoErrorPageReason } from '../../components/user-info/user-info-error-page/user-info-error-page-reason';\nimport { Notification } from '../../components/message/notification';\nimport { NotificationType } from '../../components/message/notification-type.enum';\nimport { NotificationMessage } from '../../components/message/notification-message';\nimport { NotificationContextType } from '../../components/message/notification-context-type.enum';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Route, Router } from '@angular/router';\nimport { MessageService } from '../message-service/message-service';\n\n@Injectable()\nexport class CurrentUserService {\n  messageKey!: string;\n  errorPageReason!: UserInfoErrorPageReason;\n  errorPageComponent!: object;\n\n  constructor(\n    private httpService: HttpClientService,\n    private translateService: TranslateService,\n    private router: Router,\n    private messageService: MessageService,\n  ) {}\n\n  /**\n   * Get the User Profile of the current user\n   */\n  public getUserProfile(): Observable<PersonInterface> {\n    return this.httpService.get<PersonInterface>('/acl/userprofile', {}).pipe(\n      retry(2),\n      catchError((error: HttpErrorResponse) => this.handleError(error)),\n    );\n  }\n\n  /**\n   * Get the User Roles of the current user\n   */\n  public getUserRoles(): Observable<UserrolesInterface> {\n    return this.httpService.get<UserrolesInterface>('/acl/userroles', {}).pipe(\n      retry(2),\n      catchError((error: HttpErrorResponse) => this.handleError(error)),\n    );\n  }\n\n  /**\n   * Error Handling\n   */\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    const errorPagePath = this.getUserInfoErrorPagePath();\n    // The backend returned response code zero which indicates the backend is not available\n    if (error.status === 0) {\n      this.messageKey = 'core.message.errorGeneralBackendNotAvailable';\n      this.errorPageReason = UserInfoErrorPageReason.GENERAL_EXCEPTION;\n      if (errorPagePath) {\n        this.router.navigate([errorPagePath]);\n      } else {\n        this.messageService.handleNotification(\n          new Notification(NotificationType.banner, [new NotificationMessage(this.messageKey, NotificationContextType.error)]),\n        );\n      }\n    } else {\n      // The backend returned an unsuccessful response code.\n      switch (error.status) {\n        // Unauthorized\n        case 401:\n          this.messageKey = 'core.message.error401';\n          break;\n        // No Access\n        case 403:\n          this.messageKey = 'core.message.error403';\n          break;\n        // Not found\n        case 404:\n          this.messageKey = 'core.message.error404';\n          break;\n        // Duplicate\n        case 409:\n          this.messageKey = 'core.message.error409';\n          break;\n        // Internal Server Error\n        case 500:\n          this.messageKey = 'core.message.errorGeneral';\n          this.errorPageReason = UserInfoErrorPageReason.GENERAL_EXCEPTION;\n          if (errorPagePath) {\n            this.router.navigate([errorPagePath]);\n            return throwError(error);\n          }\n          break;\n        default:\n          this.messageKey = 'core.message.errorGeneral';\n          break;\n      }\n      this.messageService.handleNotification(\n        new Notification(NotificationType.banner, [new NotificationMessage(this.messageKey, NotificationContextType.warning)]),\n      );\n    }\n    return throwError(error);\n  }\n\n  private getUserInfoErrorPagePath() {\n    let path: string | undefined = '';\n    this.router.config.forEach((route: Route) => {\n      if (route.component === this.errorPageComponent) {\n        path = route.path;\n      }\n    });\n    return path;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { UserInfoErrorPageReason } from './user-info-error-page-reason';\nimport { CurrentUserService } from '../../../services/user-service/current-user.service';\n\n@Component({\n  /*eslint-disable */\n  selector: 'ngx-core-ch-user-info-error-page',\n  templateUrl: './user-info-error-page.component.html',\n  styleUrls: ['./user-info-error-page.component.css'],\n  /*eslint-ensable */\n})\nexport class NgxCoreChUserInfoErrorPageComponent implements OnInit {\n  errorPageReason!: UserInfoErrorPageReason;\n  errorPageTitle: string = '';\n  errorPageText: string = '';\n  errorMessageKey: string = '';\n\n  constructor(private currentUserService: CurrentUserService) {}\n\n  ngOnInit(): void {\n    // Get values from user info service\n    this.errorPageReason = this.currentUserService.errorPageReason;\n    this.errorMessageKey = this.currentUserService.messageKey;\n\n    // Set default values depending on the type\n    switch (this.errorPageReason) {\n      case UserInfoErrorPageReason.USER_NOT_AUTHORIZED:\n        this.errorPageTitle = 'core.title.errorPage';\n        this.errorPageText = '';\n        break;\n      case UserInfoErrorPageReason.GENERAL_EXCEPTION:\n        this.errorPageTitle = 'core.title.errorPage';\n        this.errorPageText = 'core.text.errorPageInstruction';\n        break;\n      default:\n        this.errorPageTitle = 'core.title.errorPage';\n        this.errorPageText = '';\n    }\n  }\n}\n","<ngx-core-ch-error-page\n  [errorPageTitle]='errorPageTitle | translate'\n  [errorPageText]='errorPageText | translate'\n  [message]='errorMessageKey | translate'\n  [applicationReloadLabel]='\"core.label.reloadApplication\" | translate'>\n</ngx-core-ch-error-page>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxCoreChUserInfoErrorPageComponent } from './user-info-error-page.component';\nimport { NgxCoreChErrorPageModule } from '../../error-page/error-page.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [NgxCoreChUserInfoErrorPageComponent],\n  imports: [CommonModule, TranslateModule, NgxCoreChErrorPageModule],\n  exports: [NgxCoreChUserInfoErrorPageComponent],\n})\nexport class NgxCoreChUserInfoErrorPageModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PersonInterface } from '../../services/user-service/person.interface';\nimport { CurrentUserService } from '../../services/user-service/current-user.service';\nimport { UserrolesInterface } from '../../services/user-service/userroles.interface';\nimport { NgxCoreChUserInfoErrorPageComponent } from './user-info-error-page/user-info-error-page.component';\n\n@Component({\n  /*eslint-disable */\n  selector: 'ngx-core-ch-user-info',\n  templateUrl: './user-info.component.html',\n  styleUrls: ['./user-info.component.scss'],\n  /*eslint-enable */\n})\nexport class NgxCoreChUserInfoComponent implements OnInit {\n  @Input() currentUserId!: string;\n  currentUser$!: Observable<any>;\n  currentUser!: PersonInterface;\n  userRoles!: string[];\n\n  constructor(private currentUserService: CurrentUserService) {}\n\n  ngOnInit(): void {\n    this.currentUserService.errorPageComponent = NgxCoreChUserInfoErrorPageComponent;\n    this.getCurrentUser();\n  }\n\n  private getCurrentUser(): void {\n    this.currentUser$ = forkJoin([\n      this.currentUserService.getUserProfile().pipe(\n        map((currentUser: PersonInterface) => {\n          this.currentUser = currentUser;\n        }),\n      ),\n      this.currentUserService.getUserRoles().pipe(\n        map((userRoles: UserrolesInterface) => {\n          this.userRoles = userRoles.userroles;\n        }),\n      ),\n    ]);\n  }\n\n  getCurrentUserId(): string {\n    return this.currentUserId;\n  }\n}\n","<div *ngIf=\"(currentUser$ | async); else userId\">\n    <ng-container>\n      {{currentUser.firstname}} {{currentUser.lastname}}\n    </ng-container>\n    <nx-context-menu #menu=\"nxContextMenu\">\n      <p nxContextMenuItem>{{currentUser.bukrsGe}}</p>\n      <p nxContextMenuItem>{{currentUser.ounr}} - {{currentUser.oushortname}}</p>\n      <p nxContextMenuItem *ngIf=\"currentUser.asuvornamegeneralagent\">\n        {{currentUser.asuvornamegeneralagent}} {{currentUser.asunachnamegeneralagent}}\n        - {{currentUser.city}}</p>\n      <p nxContextMenuItem *ngIf=\"currentUser.agencytype\">{{currentUser.agencytype}}</p>\n      <p nxContextMenuItem *ngIf=\"userRoles\">{{userRoles.join(', ')}}</p>\n    </nx-context-menu>\n    <button\n      nxIconButton=\"tertiary small\"\n      [nxContextMenuTriggerFor]=\"menu\"\n      aria-label=\"Open menu\"\n      type=\"button\"\n      class=\"nx-margin-left-2xs\">\n      <nx-icon aria-hidden=\"true\" name=\"chevron-down-small\" size=\"s\"></nx-icon>\n    </button>\n</div>\n<ng-template #userId>{{getCurrentUserId()}}</ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxCoreChUserInfoComponent } from './user-info.component';\nimport { NxContextMenuModule } from '@aposin/ng-aquila/context-menu';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { NxButtonModule } from '@aposin/ng-aquila/button';\nimport { NxCopytextModule } from '@aposin/ng-aquila/copytext';\n\n@NgModule({\n  declarations: [NgxCoreChUserInfoComponent],\n  imports: [CommonModule, NxContextMenuModule, NxIconModule, NxButtonModule, NxCopytextModule],\n  exports: [NgxCoreChUserInfoComponent],\n  providers: [],\n})\nexport class NgxCoreChUserInfoModule {}\n","/**\n * Possible values for the different toast's types (these values correspond to the differnt bootstrap classes for alerts)\n */\nexport enum ToastType {\n  success = 1,\n  info = 2,\n  warning = 3,\n  danger = 4,\n  confirm = 5,\n  cleanup = 6,\n}\n","export enum BANNER_CONTEXT {\n  info = 'info',\n  error = 'error',\n  warning = 'warning',\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MessageService } from '../../services/message-service/message-service';\nimport { ToastType } from './toast-type';\nimport { Message } from './message.pojo';\nimport { takeUntil } from 'rxjs/operators';\nimport { ReplaySubject } from 'rxjs';\nimport { NotificationType } from './notification-type.enum';\nimport { NotificationContextType } from './notification-context-type.enum';\nimport { NotificationMessage } from './notification-message';\nimport { NxMessageToastContext, NxMessageToastService } from '@aposin/ng-aquila/message';\nimport { Notification } from './notification';\nimport { NavigationStart, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BANNER_CONTEXT } from './banner-context-type.enum';\n\n/**\n * Component that shows modal and non-modal messages\n */\n@Component({\n  /*eslint-disable */\n  selector: 'ngx-core-ch-app-msg',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  /*eslint-enable */\n})\nexport class NgxCoreChMessageComponent implements OnInit, OnDestroy {\n  @Input() confirmLabelText!: string;\n  @Input() declineLabelText!: string;\n  @Input() closeLabelText!: string;\n\n  showNonModal = false;\n  nonModalClasses: string[] = []; // store the ToastType for the messages that are shown in toasts\n  messagesNonModal: Message[] = [];\n  notificationTypes: typeof NotificationType = NotificationType;\n  notificationType!: NotificationType;\n  notificationContextType!: NotificationContextType;\n  notificationMessages: NotificationMessage[] = [];\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private msgService: MessageService,\n    private messageToastService: NxMessageToastService,\n    private router: Router,\n    private translateService: TranslateService,\n  ) {}\n\n  ngOnInit(): void {\n    // non modal\n    this.msgService.onNonModalError.pipe(takeUntil(this.destroyed$)).subscribe((messagesNonModal: Message[]) => {\n      this.messagesNonModal = messagesNonModal;\n\n      // Check if we have a massege, if yes display, if not, clean up\n      if (this.messagesNonModal[0].toastType !== ToastType.cleanup) {\n        this.showNonModal = true;\n        for (const messageNonModal of messagesNonModal) {\n          this.nonModalClasses.push(this.getToastTypeAsString(messageNonModal.toastType));\n        }\n      } else {\n        this.showNonModal = false;\n      }\n    });\n    // notification\n    this.msgService.notification.pipe(takeUntil(this.destroyed$)).subscribe((notification: Notification) => {\n      this.notificationType = notification.notificationType;\n      this.notificationMessages = notification.notificationMessages;\n      this.notificationContextType = notification.notificationMessages[0].notificationContextType;\n      if (this.notificationType === this.notificationTypes.toast) {\n        const message = this.translateService.instant(this.notificationMessages[0].message);\n        this.messageToastService.open(message, {\n          context: this.getNxMessageToastContext(this.notificationContextType) as NxMessageToastContext,\n          duration: 5000,\n        });\n      }\n    });\n    this.router.events.subscribe((value) => {\n      if (value instanceof NavigationStart) {\n        this.clearMessages();\n      }\n    });\n  }\n\n  /**\n   * Removes message from non modal messages list\n   * @param arrayPosition - The deleted element's position\n   */\n  closeNonModalMsg(arrayPosition: number) {\n    this.messagesNonModal.splice(arrayPosition, 1);\n    this.nonModalClasses.splice(arrayPosition, 1);\n    if (this.messagesNonModal.length === 0) {\n      this.showNonModal = false;\n    }\n  }\n\n  closeNotification(arrayPosition: number): void {\n    this.notificationMessages.splice(arrayPosition, 1);\n  }\n\n  hasMessages(): boolean {\n    return this.notificationMessages.length > 0 && this.notificationType !== NotificationType.toast;\n  }\n\n  /**\n   * Used to translate the Message types to the NDBX types\n   *\n   * @param toastType - toast type\n   * @returns string\n   */\n  getNdbxType(toastType?: ToastType) {\n    if (toastType) {\n      switch (toastType.toString()) {\n        case '4':\n          return NotificationContextType.error;\n        case '3':\n          return NotificationContextType.warning;\n        case '2':\n          return NotificationContextType.info;\n        case '5':\n          return NotificationContextType.info;\n        default:\n          return NotificationContextType.success;\n      }\n    } else {\n      return NotificationContextType.success;\n    }\n  }\n\n  /**\n   * Prep Context\n   * @param type - type\n   */\n  getContext(type: NotificationContextType) {\n    switch (type.toString()) {\n      case 'info':\n        return BANNER_CONTEXT.info;\n      case 'warning':\n        return BANNER_CONTEXT.warning;\n      case 'error':\n        return BANNER_CONTEXT.error;\n      default:\n        return BANNER_CONTEXT.info;\n    }\n  }\n\n  /**\n   * TODO JM: With TypeScript 2.4 we can get rid of stuff like this and use string based enums\n   * Converts the toast types (enum values) to their corresponding string values\n   * @param toastType - The toast type (it corresponds to the bootstrap alerts type)\n   * @returns string- Toast Type as strings (possible values: danger, warning, info, success)\n   */\n  getToastTypeAsString(toastType: ToastType | undefined) {\n    switch (toastType) {\n      case ToastType.danger:\n        return 'danger';\n      case ToastType.warning:\n        return 'warning';\n      case ToastType.info:\n        return 'info';\n      default:\n        return 'success';\n    }\n  }\n\n  /**\n   * Used to translate the NotificationMessage types to the NxMessageToastContext\n   * NxMessageToastContext accepts just info and success as context type. All other types will result in undefined which is similar to\n   * regular tpye style https://api-test.allianz.com/ngx-ndbx-dev/documentation/message/api#NxMessageToastContext\n   *\n   * @param notificationContextType - type\n   * @returns string\n   */\n  getNxMessageToastContext(notificationContextType: NotificationContextType): string | undefined {\n    switch (notificationContextType) {\n      case NotificationContextType.info:\n        return 'info';\n      case NotificationContextType.success:\n        return 'success';\n      default:\n        // will result in a regular context type\n        return undefined;\n    }\n  }\n\n  private clearMessages(): void {\n    this.messagesNonModal.length = 0;\n    this.showNonModal = false;\n    this.notificationMessages.length = 0;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<div *ngIf=\"showNonModal\">\n<div *ngFor=\"let messageNonModal of messagesNonModal; let i = index\">\n  <!-- ---------------------------------------------------------------------------------- -->\n  <nx-message [context]=\"getNdbxType(messageNonModal.toastType)\" closable=\"true\" (close)=\"closeNonModalMsg(i)\">{{ messageNonModal.message | translate}}</nx-message>\n  <!-- ---------------------------------------------------------------------------------- -->\n</div>\n</div>\n<div *ngIf=\"hasMessages()\" class=\"nx-margin-s margin-box\">\n  <div *ngFor=\"let notificationMessage of notificationMessages; let i = index\" [ngSwitch]=\"notificationType\">\n    <nx-message *ngSwitchCase=\"notificationTypes.inline\" [context]=\"notificationMessage.notificationContextType\">{{notificationMessage.message | translate}}</nx-message>\n    <nx-message *ngSwitchCase=\"notificationTypes.closable\" [context]=\"notificationMessage.notificationContextType\" closable=\"true\" (close)=\"closeNotification(i)\">{{notificationMessage.message | translate}}</nx-message>\n    <nx-message-banner *ngSwitchCase=\"notificationTypes.banner\" [context]=\"getContext(notificationMessage.notificationContextType)\" (close)=\"closeNotification(i)\">{{ notificationMessage.message | translate}}</nx-message-banner>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxCoreChMessageComponent } from './message.component';\nimport { NdbxSharedModule } from '../../ndbx-shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [NgxCoreChMessageComponent],\n  imports: [CommonModule, NdbxSharedModule, TranslateModule],\n  exports: [NgxCoreChMessageComponent],\n})\nexport class NgxCoreChMessageModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// Loading Spinner\nimport { NgxCoreChSpinnerModule } from './loading-spinner/loading-spinner.module';\n\n// Error Page\nimport { NgxCoreChErrorPageModule } from './error-page/error-page.module';\n\n// Language Selection\nimport { NgxCoreChLanguageSelectionModule } from './language-selection/language-selection.module';\n\n// User Info\nimport { NgxCoreChUserInfoModule } from './user-info/user-info.module';\nimport { NgxCoreChUserInfoErrorPageModule } from './user-info/user-info-error-page/user-info-error-page.module';\n\nimport { NxCopytextModule } from '@aposin/ng-aquila/copytext';\nimport { NxButtonModule } from '@aposin/ng-aquila/button';\nimport { NxContextMenuModule } from '@aposin/ng-aquila/context-menu';\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { NgxCoreChMessageModule } from './message/message.module';\n\n@NgModule({\n  imports: [CommonModule, NxIconModule, NxContextMenuModule, NxButtonModule, NxCopytextModule],\n  declarations: [],\n  exports: [\n    NgxCoreChErrorPageModule,\n    NgxCoreChSpinnerModule,\n    NgxCoreChLanguageSelectionModule,\n    NgxCoreChUserInfoModule,\n    NgxCoreChUserInfoErrorPageModule,\n    NgxCoreChMessageModule,\n  ],\n  providers: [],\n})\nexport class NgxCoreComponentsModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { HttpClientService } from './http-client-service';\nimport { AppConfigService } from '../../app-config/app-config.service';\n\n/**\n * Wrapper around built-in Angular HTTP Service\n */\n@Injectable()\nexport class HttpClientImplService extends HttpClientService {\n  constructor(\n    private httpClient: HttpClient,\n    private appConfigService: AppConfigService,\n  ) {\n    super();\n  }\n\n  get<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // assemble the Http Options, including header, etc..\n    const httpOptions = {\n      headers: this.buildHttpHeaders(),\n    };\n\n    if (options) {\n      if (options.params) {\n        // include optionally params if exists\n        // TODO: linter fix\n        // httpOptions['params'] = options.params;\n      }\n\n      if (options.responseType) {\n        // TODO: linter fix\n        //httpOptions['responseType'] = options.responseType;\n      }\n    }\n    return this.httpClient.get<T>(this.prepareUrlForRequest(url), httpOptions);\n  }\n\n  post<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    return this.httpClient.post<T>(this.prepareUrlForRequest(url), body, { headers: this.buildHttpHeaders() });\n  }\n\n  put<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    return this.httpClient.put<T>(this.prepareUrlForRequest(url), body, { headers: this.buildHttpHeaders() });\n  }\n\n  delete<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: string;\n      params?: HttpParams | { [param: string]: string | string[] };\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    return this.httpClient.delete<T>(this.prepareUrlForRequest(url), { headers: this.buildHttpHeaders() });\n  }\n\n  /**\n   * prepares the url by calling\n   * - appendApiServerRoot\n   * - encodeQueryParams\n   * @param url the url to prepare\n   * @returns the prepared url\n   */\n  prepareUrlForRequest(url: string): string {\n    const urlWithServerRoot = this.appendApiServerRoot(url);\n    if (this.extractQueryParamsFromUrl(url)) {\n      const baseUrlWithServerRoot = urlWithServerRoot.substring(0, urlWithServerRoot.indexOf('?'));\n      const encodedQueryParams = this.encodeQueryParams(encodeURI(urlWithServerRoot));\n      return baseUrlWithServerRoot + '?' + encodedQueryParams;\n    }\n    return urlWithServerRoot;\n  }\n\n  /**\n   * @param boolean useLoadingSpinner - Only if this is set to true, we will consider showing a spinner\n   * @param string spinnerId - Specifies which spinner is addressed as there could be multiple ones\n   * @returns HttpHeaders -If we did not have any order to show a spinner, we just return empty headers\n   */\n  private buildHttpHeaders(): HttpHeaders {\n    return new HttpHeaders();\n  }\n\n  /**\n   * Encodes the url query params like in address search 'biel/bienne'\n   * atm we just encode the slash, because all of the following methods have drawbacks.\n   * - encodeURI\n   * - encodeURIComponent\n   * - URLSearchParams\n   * @param url the url to encode\n   * @returns the encoded url\n   */\n  private encodeQueryParams(url: string): string {\n    let encodedQueryParams = '';\n    const extractedQueryParams = this.extractQueryParamsFromUrl(url);\n    // url has query params\n    if (extractedQueryParams) {\n      encodedQueryParams = extractedQueryParams.replace(new RegExp('/', 'g'), '%2F');\n    }\n    return encodedQueryParams;\n  }\n\n  /**\n   * extracts the query param string from the given url\n   * @param url the given url\n   * @returns the query param string or undefined if there are no query params\n   */\n  private extractQueryParamsFromUrl(url: string): string | undefined {\n    let queryParams;\n    if (url.indexOf('?') >= 0) {\n      queryParams = url.substring(url.indexOf('?') + 1);\n    }\n    return queryParams;\n  }\n\n  /**\n   * If url is relative then the `apiServerRoot` is appended to the url else return the url\n   * @param string url - A string containing the URL to which the request is sent.\n   * @returns string url's absolute path\n   */\n  private appendApiServerRoot(url: string) {\n    // if url's absolute path is given then just return that url\n    if (url && url[0].indexOf('/') === -1) {\n      return url;\n    }\n    return `${this.appConfigService.apiServerRoot}${url}`;\n  }\n}\n","import { HttpClientService } from '../services/http-service/http-client-service';\nimport { HttpClientImplService } from '../services/http-service/http-client-impl.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AppConfigService } from '../app-config/app-config.service';\n\n/**\n * Factory for the http service. Returns a concrete implementation of the {@link HttpClientService} depending on the environment.\n * As this class has dependencies,\n * we have to make sure that these dependencies are met in different factories before providing this service.\n * Because of {@link APP_INITIALIZER} and provisioning of custom interdependent services this topic is quite complex...\n * @param HttpClient httpClient\n * @param AppConfigService appConfigService\n * @returns HttpClientService\n */\nexport function httpServiceFactory(httpClient: HttpClient, appConfigService: AppConfigService): HttpClientService {\n  return new HttpClientImplService(httpClient, appConfigService);\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MessageService } from './message-service';\nimport { Message } from '../../components/message/message.pojo';\nimport { Notification } from '../../components/message/notification';\n\n@Injectable()\nexport class MessageImplService extends MessageService {\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  /*****************************************************************************************************************/\n  /* The following methods are used to show messages/errors manually (no http request involved)                    */\n  /*****************************************************************************************************************/\n\n  /**\n   * Emits non-modal messages\n   * @param messages - Object that holds the validation/error messages\n   */\n  handleNonModalError(messages: Message[]): void {\n    this.onNonModalError.next(messages);\n  }\n\n  /**\n   * Emits notification\n   * @param notification: Notification - Object that holds the notification type and notificationMessages\n   */\n  handleNotification(notification: Notification): void {\n    this.notification.next(notification);\n  }\n\n  /**\n   * Navigates to error page. A message-service can be passed as routeParams.\n   * @param routeTo - The name of the route. For Example '/ErrorPage' (value of [routerLink])\n   * @param trackingId - trackingId is used for searching for tracking the errors in the backend\n   */\n  goToErrorPage(routeTo: string, trackingId: string): void {\n    this.injector.get(Router).navigate([routeTo, { trackingId: trackingId }]);\n  }\n}\n","import { Injector } from '@angular/core';\nimport { MessageService } from '../services/message-service/message-service';\nimport { MessageImplService } from '../services/message-service/message-impl.service';\n\n/**\n * As this class is necessary for {@link HttpClientService}, we have to make\n * sure to provide it early enough so all dependencies are resolved correctly.\n * We have to take care in this case only because of {@link APP_INITIALIZER} and\n * provisioning of custom interdependent services - quite complex topic!\n * @param Injector injector - We need to avoid cyclic dependencies,\n * so we pass the injector directly and the service can get the {@link Router} from it when necessary\n * @returns MessageService\n */\nexport function messageServiceFactory(injector: Injector): MessageService {\n  return new MessageImplService(injector);\n}\n","import { CurrentUserService } from '../services/user-service/current-user.service';\nimport { HttpClientService } from '../services/http-service/http-client-service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Router } from '@angular/router';\nimport { MessageService } from '../services/message-service/message-service';\n\n/**\n * Factory for the current user service. Returns a concrete implementation of the {@link CurrentUserService} depending on the environment.\n * As this class has dependencies,\n * we have to make sure that these dependencies are met in different factories before providing this service.\n * Because of {@link APP_INITIALIZER} and provisioning of custom interdependent services this topic is quite complex...\n * @param HttpClientService httpClientService\n * @param TranslateService translateService\n * @param Router: router\n * @param MsgService: messageService\n * @returns CurrentUserService\n */\nexport function currentUserServiceFactory(\n  httpClientService: HttpClientService,\n  translateService: TranslateService,\n  router: Router,\n  messageService: MessageService,\n): CurrentUserService {\n  return new CurrentUserService(httpClientService, translateService, router, messageService);\n}\n","import { ToastType } from './toast-type';\n\n/**\n * Object that stores the message and its severity (= toastType). The message and its severity can be retrieved from backend\n * validation.\n * The toast's style depends on the toast type. The toastType is optional in case no toast is shown.\n */\nexport class Message {\n  constructor(\n    public message: string,\n    public toastType?: ToastType,\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * return the global native browser window object\n * @returns Window\n */\nfunction _window(): any {\n  return window;\n}\n\n@Injectable()\nexport class WindowRef {\n  reload(bool: boolean): void {\n    this.nativeWindow().location.reload(bool);\n  }\n\n  get nativeWindow(): any {\n    return _window();\n  }\n\n  get navigator(): Navigator {\n    return this.nativeWindow.navigator;\n  }\n\n  locationBase(): string {\n    const loc = this.nativeWindow.location;\n    return `${loc.protocol}//${loc.host}/`;\n  }\n\n  locationHrefBase(): string {\n    const href = this.nativeWindow.location.href;\n    if (!href.includes('#')) {\n      return href;\n    }\n    return href.substr(0, href.indexOf('#'));\n  }\n\n  navigateToUrl(url: string): void {\n    this.nativeWindow.location.href = url;\n  }\n}\n","import { NxDatepickerIntl } from '@aposin/ng-aquila/datefield';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxCoreChDatepicker extends NxDatepickerIntl {\n  constructor(private translateService: TranslateService) {\n    super();\n    this.setDatePickerLabels('core.datepicker');\n  }\n\n  private setDatePickerLabels(labelName: string): void {\n    this.translateService.stream(labelName).subscribe((result: NgxCoreChDatepicker) => {\n      this.calendarLabel = result.calendarLabel; /** used by screen readers */\n      this.openCalendarLabel = result.openCalendarLabel; /** used by screen readers */\n      this.prevMonthLabel = result.prevMonthLabel; /** used by screen readers */\n      this.nextMonthLabel = result.nextMonthLabel; /** used by screen readers */\n      this.prevYearLabel = result.prevYearLabel; /** used by screen readers */\n      this.nextYearLabel = result.nextYearLabel; /** used by screen readers */\n      this.prevMultiYearLabel = result.prevMultiYearLabel; /** used by screen readers */\n      this.nextMultiYearLabel = result.nextMultiYearLabel; /** used by screen readers */\n      this.switchToMonthViewLabel = result.switchToMonthViewLabel;\n      this.switchToMultiYearViewLabel = result.switchToMultiYearViewLabel;\n    });\n  }\n}\n","import { MissingTranslationHandler, MissingTranslationHandlerParams } from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\n\n/**\n * Service gets invoked when a translation could not be found. The moment the application got refactored to use\n * synchronous data loading via @link APP_INITIALIZER, we want to know about every translation event that could not\n * get executed successfully. So we inform the backend about the event to persist this information. To avoid backend\n * flooding, we count each of the xhr requests fired for missing translations and stop at some point.\n */\n@Injectable()\nexport class LogMissingTranslationHandler implements MissingTranslationHandler {\n  private readonly maxBackendCalls = 5;\n  private backendCallsRemaining = this.maxBackendCalls;\n\n  /**\n   * @param params MissingTranslationHandlerParams - Contains information about the untranslatable key and its service.\n   * @returns string For now we indicate the missing of a translation just by informing user and logs about it.\n   */\n  handle(params: MissingTranslationHandlerParams): string {\n    if (this.backendCallsRemaining > 0) {\n      this.backendCallsRemaining--;\n      const body = JSON.stringify({ level: 'warn', message: `Missing translation for key ${params.key}` });\n      console.log(body);\n    } else {\n      console.log(`As we did already sent ${this.maxBackendCalls} requests to backend we stop from now on to avoid flooding.`);\n    }\n    return `${params.key} TRANSLATION_MISSING`;\n  }\n}\n","import { Injector, ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { HttpClientService } from './services/http-service/http-client-service';\nimport { httpServiceFactory } from './factories/http-service.factory';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { WindowRef } from './util/window-ref';\nimport { MessageService } from './services/message-service/message-service';\nimport { messageServiceFactory } from './factories/message-service.factory';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NgxCoreComponentsModule } from './components/components.module';\nimport { AppConfigService } from './app-config/app-config.service';\nimport { currentUserServiceFactory } from './factories/current-user-service.factory';\nimport { CurrentUserService } from './services/user-service/current-user.service';\nimport { Router } from '@angular/router';\nimport { NgxCoreChDatepicker } from './util/ngx-core-ch-datepicker';\n\n@NgModule({\n  declarations: [],\n  imports: [HttpClientModule, NgxCoreComponentsModule],\n  exports: [NgxCoreComponentsModule],\n})\nexport class NgxCoreChModule {\n  public static forRoot(appConfigProvider: Provider): ModuleWithProviders<NgxCoreChModule> {\n    return {\n      ngModule: NgxCoreChModule,\n      providers: [\n        // App Config Service\n        appConfigProvider,\n\n        // Message Service\n        {\n          provide: MessageService,\n          useFactory: messageServiceFactory,\n          deps: [Injector],\n        },\n\n        // HTTP Service\n        {\n          provide: HttpClientService,\n          useFactory: httpServiceFactory,\n          deps: [HttpClient, AppConfigService],\n        },\n\n        WindowRef,\n        NgxCoreChDatepicker,\n        AppConfigService,\n\n        {\n          provide: CurrentUserService,\n          useFactory: currentUserServiceFactory,\n          deps: [HttpClientService, TranslateService, Router, MessageService],\n        },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-core-ch\n */\nexport { AppConfigService } from './lib/app-config/app-config.service';\nexport { AppConfigServiceConfig } from './lib/app-config/app-config-service-config';\nexport { APP_CONFIG_SERVICE_CONFIG_TOKEN } from './lib/app-config/app-config-service-config-token';\n\nexport { NgxCoreChErrorPageComponent } from './lib/components/error-page/error-page.component';\nexport { NgxCoreChErrorPageModule } from './lib/components/error-page/error-page.module';\n\nexport { NgxCoreChLanguageSelectionComponent } from './lib/components/language-selection/language-selection.component';\nexport { NgxCoreChLanguageSelectionModule } from './lib/components/language-selection/language-selection.module';\n\nexport { NgxCoreChSpinnerComponent } from './lib/components/loading-spinner/loading-spinner.component';\nexport { NgxCoreChSpinnerModule } from './lib/components/loading-spinner/loading-spinner.module';\n\nexport { NgxCoreChUserInfoErrorPageComponent } from './lib/components/user-info/user-info-error-page/user-info-error-page.component';\nexport { NgxCoreChUserInfoErrorPageModule } from './lib/components/user-info/user-info-error-page/user-info-error-page.module';\n\nexport { NgxCoreChUserInfoComponent } from './lib/components/user-info/user-info.component';\nexport { NgxCoreChUserInfoModule } from './lib/components/user-info/user-info.module';\n\nexport { NgxCoreComponentsModule } from './lib/components/components.module';\n\nexport { httpServiceFactory } from './lib/factories/http-service.factory';\nexport { messageServiceFactory } from './lib/factories/message-service.factory';\nexport { currentUserServiceFactory } from './lib/factories/current-user-service.factory';\n\nexport { HttpClientService } from './lib/services/http-service/http-client-service';\nexport { HttpClientImplService } from './lib/services/http-service/http-client-impl.service';\nexport { CurrentUserService } from './lib/services/user-service/current-user.service';\n\nexport { PersonInterface } from './lib/services/user-service/person.interface';\nexport { UserrolesInterface } from './lib/services/user-service/userroles.interface';\n\nexport { Message } from './lib/components/message/message.pojo';\nexport { MessageImplService } from './lib/services/message-service/message-impl.service';\nexport { NgxCoreChMessageComponent } from './lib/components/message/message.component';\nexport { NgxCoreChMessageModule } from './lib/components/message/message.module';\nexport { MessageService } from './lib/services/message-service/message-service';\nexport { ToastType } from './lib/components/message/toast-type';\nexport { Notification } from './lib/components/message/notification';\nexport { NotificationContextType } from './lib/components/message/notification-context-type.enum';\nexport { NotificationMessage } from './lib/components/message/notification-message';\nexport { NotificationType } from './lib/components/message/notification-type.enum';\n\nexport { WindowRef } from './lib/util/window-ref';\nexport { NgxCoreChDatepicker } from './lib/util/ngx-core-ch-datepicker';\n\nexport { LogMissingTranslationHandler } from './lib/language/missing-translation.handler';\n\nexport { NgxCoreChModule } from './lib/ngx-core-ch.module';\nexport { NdbxSharedModule } from './lib/ndbx-shared.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.AppConfigService","i5","i2","i3","i4","i1","i1.HttpClientService","i4.MessageService","i1.CurrentUserService","i2.NgxCoreChErrorPageComponent","i1.MessageService","i2.AppConfigService"],"mappings":"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"}